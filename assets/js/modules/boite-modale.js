let conteneurHTML = document.querySelector(".contenant-modale");
let elementHTML;

function initBoiteModale() {
  creePopUp();
  afficherMessage();
}

/**
 * Fonction qui cr√©e une bo√Æte modale (popup) et qui ins√®re un gabarit dans le conteneur de gabarit. Une variable prend le dernier √©l√©ment du conteneur et un √©couteur d'√©v√©nement est mis dessus, qui au clic, affiche la popup.
 */

function creePopUp() {
  const gabarit = `
    <div class="boite-modale invisible">
    <div class="en-tete">
    <h1>Un √©t√© √† la ferme est de retour!üê£üêê&nbsp;&nbsp;<span>X</span></h1>
    </div>
    <picture><img src="../assets/img/imgEvenement/Carre/Degustation-mensuelle.jpg" alt="degustation"></picture>
    <p>Un √©t√© √† profiter des animaux, de la nature et de la bouffe gourmande et sant√©.</p>
    <h3>Achetez votre passeport et chandail !&nbsp;&nbsp;&nbsp;Quantit√©s limit√©es.üé´üëï</h3>
    </div>
  `;
  conteneurHTML.insertAdjacentHTML("beforeend", gabarit);
  elementHTML = conteneurHTML.lastElementChild;
  elementHTML.addEventListener("click", auClicMessage);
}

/**
 * Fonction servant √† afficher la boite modale
 */
function afficherMessage() {
  elementHTML.classList.remove("invisible");
}

/**
 * Fonction servant √† cacher la boite modale
 */
function cacherMessage() {
  elementHTML.classList.add("invisible");
  //ou la supprimer de la page
}

/**
 * Fonction servant √† fermer au clic une boite modale et enregistrer la valeur d√©finie (passeport) dans le local storage pour ne plus que la bo√Æte modale soit r√©affich√©e √† l'utilisateur au rechargement de la page.
 *
 */
function auClicMessage() {
  cacherMessage();
  //localStorage.setItem("passeport", true);
}

/**
 * Fonction qui donne un d√©lai de 5 secondes avant que la bo√Æte modale apparaisse
 */

export default function onAffichePopup() {
  setTimeout(function () {
    initBoiteModale();
  }, 5000);
}
